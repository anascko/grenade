# grenaderc - Configuration

# Find the other rc files
RC_DIR=$(cd $(dirname "$BASH_SOURCE") && pwd)

source $RC_DIR/functions

# Base GIT Repo URL
# Another option is http://review.openstack.org/p
# Another option is https://github.com
GIT_BASE=git://git.openstack.org
#GIT_BASE=/opt/git

# Destination path for installation ``STACK_ROOT``
STACK_ROOT=/opt/stack
DATA_DIR=${STACK_ROOT}/data

# Release info
BASE_RELEASE=juno
BASE_RELEASE_DIR=${STACK_ROOT}/$BASE_RELEASE

TARGET_RELEASE=kilo
TARGET_RELEASE_DIR=${STACK_ROOT}/$TARGET_RELEASE

# DevStack sources
BASE_DEVSTACK_REPO=$GIT_BASE/openstack-dev/devstack.git
BASE_DEVSTACK_BRANCH=stable/$BASE_RELEASE
BASE_DEVSTACK_DIR=$BASE_RELEASE_DIR/devstack

TARGET_DEVSTACK_REPO=$BASE_DEVSTACK_REPO
TARGET_DEVSTACK_BRANCH=master
TARGET_DEVSTACK_DIR=$TARGET_RELEASE_DIR/devstack

TEMPEST_CONCURRENCY=${TEMPEST_CONCURRENCY:-$(nproc --all)}

# Saved stuff
SAVE_DIR=${STACK_ROOT}/save

# Screen session name
SCREEN_NAME=${SCREEN_NAME:-stack}

# Logging
LOGFILE=${STACK_ROOT}/logs/grenade.sh.log
LOGDAYS=1
TIMESTAMP_FORMAT="%F-%H%M%S"
CURRENT_LOG_TIME=${CURRENT_LOG_TIME:-$(date "+$TIMESTAMP_FORMAT")}
SCREEN_LOGDIR=${STACK_ROOT}/logs/screen

# Project directories
GLANCECLIENT_DIR=python-glanceclient
GLANCE_DIR=glance
KEYSTONECLIENT_DIR=python-keystoneclient
KEYSTONE_DIR=keystone
NOVACLIENT_DIR=python-novaclient
NOVA_DIR=nova

# Timeouts
ACTIVE_TIMEOUT=120
SERVICE_TIMEOUT=120

# Allow local overrides of env variables
if [ -f $RC_DIR/localrc ]; then
    source $RC_DIR/localrc
fi


# Defaults that use values from localrc go here

# Enable tempest
ENABLE_TEMPEST=${ENABLE_TEMPEST:=True}

# We need RECLONE to get the updated branches; not everyone wants it though
RECLONE=${RECLONE:-no}

# Allow skipping smoke tests
RUN_SMOKE=${RUN_SMOKE:=True}
BASE_RUN_SMOKE=${BASE_RUN_SMOKE:-$RUN_SMOKE}
TARGET_RUN_SMOKE=${TARGET_RUN_SMOKE:-$RUN_SMOKE}

# TODO(sdague): we really need to pull these in from devstack so we aren't
# always listing them.
BASE_SERVICES="nova-api nova-conductor keystone glance-api cinder-api"
BASE_SERVICES+=" swift-object-server swift-proxy-server"

# Partial nova upgrades (upgrade all but nova-compute)
if should_upgrade "n-cpu"; then
    # only check for compute in base if we aren't supposed to shut it down
    BASE_SERVICES+=" nova-compute"
else
    TARGET_SERVICES="nova-compute "
fi

# Partial ironic upgrades (upgrade all but ironic)
if is_service_enabled "ironic"; then
    if should_upgrade "ir-"; then
        BASE_SERVICES+=" ironic-conductor ironic-api"
    else
        TARGET_SERVICES=" ironic-conductor ironic-api"
    fi
fi

TARGET_SERVICES+=$BASE_SERVICES

# Need this for global requirements
REQUIREMENTS_DIR=$TARGET_RELEASE_DIR/requirements

# Local variables:
# mode: shell-script
# End:
