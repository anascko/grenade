#!/bin/bash
#
# Copyright 2015 Hewlett-Packard Development Company, L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

GRENADE_DB=$SAVE_DIR/grenade_db.ini

function load_settings {
    local in_tree_plugins=$RC_DIR/projects
    for dir in $in_tree_plugins/*; do
        local settings=$dir/settings
        if [[ -e $settings ]]; then
            source $settings
        fi
    done
    export UPGRADE_PROJECTS
}

function shutdown_services {
    echo "Upgrade projects: $UPGRADE_PROJECTS"
    # iterate in reverse under the theory that we should take down
    # services in opposite order
    local reverse_projects=""
    local project=""
    for project in $UPGRADE_PROJECTS; do
        reverse_projects="$project $reverse_projects"
    done

    for project in $reverse_projects; do
        echo "Looking for $project"
        local dir=${PLUGIN_DIR[$project]}
        if [[ -z "$dir" ]]; then
            die $LINENO "Couldn't find project '$project' in plugin list"
        fi
        local shutdown=$dir/shutdown.sh
        if [[ -e $shutdown ]]; then
            TOP_DIR=$BASE_DEVSTACK_DIR $shutdown || die "Failed to shutdown $project"
        fi
    done
}

function resources {
    # which resource phase are we in
    local phase=$1

    # bail early if we aren't going to do this level of verification.
    if [[ "$VERIFY_RESOURCES" != "True" ]]; then
        echo "Skipping resource phase ``$phase`` by configuration"
        return
    fi
    echo_summary "Running resource phase ``$phase``"

    for project in $UPGRADE_PROJECTS; do
        local dir=${PLUGIN_DIR[$project]}
        if [[ -z "$dir" ]]; then
            die $LINENO "Couldn't find project '$project' in plugin list"
        fi
        local resource=$dir/resources.sh
        if [[ -e $resource ]]; then
            # NOTE(sdague): we might need to set topdir differently?
            TOP_DIR=$BASE_DEVSTACK_DIR $resource $phase || die "Failed to run ``$resource $phase``"
        fi
    done
}

function init_grenade_db {
    if [[ ! -e $GRENADE_DB ]]; then
        mkdir -p $SAVE_DIR
        touch $GRENADE_DB
    fi
}

function resource_save {
    local project=$1
    local key=$2
    local value=$3
    iniset $GRENADE_DB $project $key $value
}

function resource_get {
    local project=$1
    local key=$2
    local value=$(iniget $GRENADE_DB $project $key)
    echo $value
}
