#!/bin/bash
#
# Copyright 2015 Hewlett-Packard Development Company, L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


function upgrade_service {
    local local_service=$1
    # figure out if the service should be upgraded
    echo "Checking for $local_service is enabled"
    local enabled=""
    # TODO(sdague) terrible work around because of missing
    # devstack functions
    if [[ $local_service == 'keystone' ]]; then
        enabled="True"
    else
        enabled=$(
            source $TARGET_DEVSTACK_DIR/functions;
            source $TARGET_DEVSTACK_DIR/stackrc;
            is_service_enabled $local_service || echo "False")
    fi
    if [[ "$enabled" == "False" ]]; then
        echo_summary "Not upgrading $local_service"
        return
    fi
    echo_summary "Upgrading $local_service..."
    $GRENADE_DIR/upgrade-$local_service || die $LINENO "Failure in upgrade-$local_service"
}


# This function triggers the upgrade process for each project if it exists,
# otherwise it shows up a warning message about the lack of this file.
function upgrade_project {
    # NOTE(maurosr): Ideally in a new upgrade test right after a release no new
    # configuration is need, so we can go on without the from-<release> directory.
    # This is also useful due to cross dependencie between d-g and grenade when
    # enabling grenade to run a an upgrade between a new pair of releases.

    project=$1
    base_dir=$2
    base_branch=$3
    target_branch=$4

    if [[ "$base_branch" == "$target_branch" ]]; then
        direction="within"
    else
        direction="from"
    fi

    upgrade_dir=$(get_release_name_from_branch $base_branch)
    upgrade_file=${base_dir}/${direction}"-"${upgrade_dir}/"upgrade-"${project}
    if [[ -e ${upgrade_file} ]]; then
        source ${upgrade_file} && configure_${project}_upgrade
    else
        echo "Warning: No new configurations were found for OpenStack $project."
        echo "If your patch fails during the upgrade this may be the cause."
    fi
}

# Determine whether grenade should be upgrading specified service, according
# to DO_NOT_UPGRADE_SERVICES
function should_upgrade {
    if [[ "$DO_NOT_UPGRADE_SERVICES" =~ "$1" ]]; then
        return 1
    fi
    return 0
}
